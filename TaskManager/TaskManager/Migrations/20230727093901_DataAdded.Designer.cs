// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.Data;

#nullable disable

namespace TaskManager.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230727093901_DataAdded")]
    partial class DataAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskManager.Model.Domain.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "This is Expense Tracker which helps you to spend your money wisely",
                            EndDate = new DateTime(2023, 7, 27, 15, 9, 1, 375, DateTimeKind.Local).AddTicks(6625),
                            Name = "SpendSmart",
                            StartDate = new DateTime(2023, 7, 27, 15, 9, 1, 375, DateTimeKind.Local).AddTicks(6624)
                        },
                        new
                        {
                            Id = 2,
                            Description = "This is Recipe app which helps you see which ingrediants are used in each recipe.",
                            EndDate = new DateTime(2023, 7, 27, 15, 9, 1, 375, DateTimeKind.Local).AddTicks(6632),
                            Name = "FoodBuddy",
                            StartDate = new DateTime(2023, 7, 27, 15, 9, 1, 375, DateTimeKind.Local).AddTicks(6631)
                        },
                        new
                        {
                            Id = 3,
                            Description = "The Policy Bazar application focus on policy of market and serches which is best for you",
                            EndDate = new DateTime(2023, 7, 27, 15, 9, 1, 375, DateTimeKind.Local).AddTicks(6634),
                            Name = "PolicyBazar",
                            StartDate = new DateTime(2023, 7, 27, 15, 9, 1, 375, DateTimeKind.Local).AddTicks(6633)
                        });
                });

            modelBuilder.Entity("TaskManager.Model.Domain.Tasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Create Merge Request for your previous commit",
                            DueDate = new DateTime(2023, 7, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            ProjectId = 1,
                            Status = true,
                            Title = "Create Merge Request for your previous commit"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Deploy Your Code in the server",
                            DueDate = new DateTime(2023, 7, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            ProjectId = 2,
                            Status = true,
                            Title = "Deploy Your Code in the server"
                        });
                });

            modelBuilder.Entity("TaskManager.Model.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TasksId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TasksId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "dhruv@gmail.com",
                            Name = "Dhruv Soni",
                            Role = "Assistant Software Developer",
                            TasksId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "soham@gmail.com",
                            Name = "Soham Patadia",
                            Role = "Jr.Software Developer",
                            TasksId = 2
                        },
                        new
                        {
                            Id = 3,
                            Email = "parin@gmail.com",
                            Name = "Parin Parikh",
                            Role = "Assistant Project Manager",
                            TasksId = 2
                        });
                });

            modelBuilder.Entity("TaskManager.Model.Domain.Tasks", b =>
                {
                    b.HasOne("TaskManager.Model.Domain.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TaskManager.Model.Domain.User", b =>
                {
                    b.HasOne("TaskManager.Model.Domain.Tasks", "Tasks")
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
